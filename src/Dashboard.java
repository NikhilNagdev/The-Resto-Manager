
import java.awt.Color;
import java.awt.Desktop;
import java.awt.HeadlessException;
import java.awt.Point;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Vector;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import javax.swing.border.LineBorder;
import javax.swing.event.DocumentListener;
import DatabaseTables.FoodItems;
import DatabaseTables.FoodToBeMade;
import DatabaseTables.MySqlConnect;
import DatabaseTables.ReadyOrders;
import constants.MyConstants;
import invoice.Bill;
import jiconfont.icons.FontAwesome;
import jiconfont.swing.IconFontSwing;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Nikhil
 */
public class Dashboard extends javax.swing.JFrame {

    //Variable declarations
    private Connection conn = null;
    private int count = 0;
    private AddOrder ad;
    private ServerSocket serverSocket = null;
    private Socket clientSocket = null;
    private ObjectOutputStream oos = null;
    private ObjectInputStream ois = null;
    private InputStream is = null;
    private double cost = 0;
    private Timer t;
    private Vector<String> foodItemsToBemade = new Vector<String>();
    private Vector<String> readyOrders = new Vector<String>();
    private FoodItems fi = new FoodItems();
    private ReadyOrders readyOrdersTable = null;
    private FoodToBeMade foodToBeMade = null;
    //End of variable declarations
    
    /**
     * Creates new form Dashboard
     */
    public Dashboard() {
        initComponents();
        myInitComponents();
    }

    public void myInitComponents() {
        setSize(1366, 720);
        this.setResizable(false);
        this.setIconImage(MyConstants.FRAMELOGO.getImage());
        conn = MySqlConnect.connectDB();
        foodToBeMade = new FoodToBeMade();
        readyOrdersTable = new ReadyOrders();
        IconFontSwing.register(FontAwesome.getIconFont());
        System.out.println("TESTTTTT");
        readyOrdersTable.truncTable();
        createServer();
        addDocumentListenerToSearch();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel4 = new javax.swing.JPanel();
        pnlPendingOrders = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        listPendingFoodItems = new javax.swing.JList<>();
        btnAddOrders = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        listTables = new javax.swing.JList<>();
        jLabel14 = new javax.swing.JLabel();
        txtPendingOrderSearch = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        pnlReadyOrders = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        listReadyTables = new javax.swing.JList<>();
        jScrollPane4 = new javax.swing.JScrollPane();
        listReadyFoodItems = new javax.swing.JList<>();
        jLabel10 = new javax.swing.JLabel();
        btnDelete = new javax.swing.JButton();
        jLabel15 = new javax.swing.JLabel();
        pnlTables = new javax.swing.JPanel();
        pnlTable1 = new javax.swing.JPanel();
        lblTable1 = new javax.swing.JLabel();
        pnlTable5 = new javax.swing.JPanel();
        lblTable5 = new javax.swing.JLabel();
        pnlTable2 = new javax.swing.JPanel();
        lblTable2 = new javax.swing.JLabel();
        pnlTable6 = new javax.swing.JPanel();
        lblTable6 = new javax.swing.JLabel();
        pnlTable3 = new javax.swing.JPanel();
        lblTable3 = new javax.swing.JLabel();
        pnlTable7 = new javax.swing.JPanel();
        lblTable7 = new javax.swing.JLabel();
        pnlTable4 = new javax.swing.JPanel();
        lblTable4 = new javax.swing.JLabel();
        pnlTable8 = new javax.swing.JPanel();
        lblTable8 = new javax.swing.JLabel();
        pnlBills = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtTable1Cost = new javax.swing.JTextField();
        txtTable3Cost = new javax.swing.JTextField();
        txtTable6Cost = new javax.swing.JTextField();
        txtTable4Cost = new javax.swing.JTextField();
        txtTable5Cost = new javax.swing.JTextField();
        txtTable2Cost = new javax.swing.JTextField();
        txtTable7Cost = new javax.swing.JTextField();
        txtTable8Cost = new javax.swing.JTextField();
        btnBillTable1 = new javax.swing.JButton();
        btnBillTable2 = new javax.swing.JButton();
        btnBillTable3 = new javax.swing.JButton();
        btnBillTable4 = new javax.swing.JButton();
        btnBillTable5 = new javax.swing.JButton();
        btnBillTable6 = new javax.swing.JButton();
        btnBillTable7 = new javax.swing.JButton();
        btnBillTable8 = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("The Resto Manager");

        jPanel4.setBackground(new java.awt.Color(38, 51, 61));
        jPanel4.setPreferredSize(new java.awt.Dimension(1366, 720));
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        pnlPendingOrders.setBackground(new java.awt.Color(38, 51, 61));
        pnlPendingOrders.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 164, 0)));
        pnlPendingOrders.setPreferredSize(new java.awt.Dimension(600, 300));
        pnlPendingOrders.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                pnlPendingOrdersMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                pnlPendingOrdersMouseExited(evt);
            }
        });

        listPendingFoodItems.setBackground(new java.awt.Color(38, 51, 61));
        listPendingFoodItems.setFont(new java.awt.Font("Calibri", 0, 16)); // NOI18N
        listPendingFoodItems.setForeground(new java.awt.Color(255, 255, 255));
        jScrollPane2.setViewportView(listPendingFoodItems);

        btnAddOrders.setBackground(new java.awt.Color(96, 218, 137));
        btnAddOrders.setText("Add orders");
        btnAddOrders.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnAddOrdersMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnAddOrdersMouseExited(evt);
            }
        });
        btnAddOrders.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddOrdersActionPerformed(evt);
            }
        });

        listTables.setBackground(new java.awt.Color(38, 51, 61));
        listTables.setFont(new java.awt.Font("Calibri", 0, 16)); // NOI18N
        listTables.setForeground(new java.awt.Color(255, 255, 255));
        listTables.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Table 1", "Table 2", "Table 3", "Table 4", "Table 5", "Table 6", "Table 7", "Table 8" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        listTables.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listTablesValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(listTables);

        jLabel14.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(255, 255, 255));
        jLabel14.setText("Table Numbers");

        txtPendingOrderSearch.setBackground(new java.awt.Color(38, 51, 61));
        txtPendingOrderSearch.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        txtPendingOrderSearch.setForeground(new java.awt.Color(255, 255, 255));

        jLabel12.setFont(new java.awt.Font("Calibri", 0, 22)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setText("Pending Orders");

        javax.swing.GroupLayout pnlPendingOrdersLayout = new javax.swing.GroupLayout(pnlPendingOrders);
        pnlPendingOrders.setLayout(pnlPendingOrdersLayout);
        pnlPendingOrdersLayout.setHorizontalGroup(
            pnlPendingOrdersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlPendingOrdersLayout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addGroup(pnlPendingOrdersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlPendingOrdersLayout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                        .addComponent(btnAddOrders, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlPendingOrdersLayout.createSequentialGroup()
                        .addComponent(jLabel14)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addGroup(pnlPendingOrdersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE)
                    .addComponent(txtPendingOrderSearch))
                .addGap(25, 25, 25))
            .addGroup(pnlPendingOrdersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlPendingOrdersLayout.createSequentialGroup()
                    .addContainerGap(251, Short.MAX_VALUE)
                    .addComponent(jLabel12)
                    .addGap(221, 221, 221)))
        );
        pnlPendingOrdersLayout.setVerticalGroup(
            pnlPendingOrdersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlPendingOrdersLayout.createSequentialGroup()
                .addGap(84, 84, 84)
                .addGroup(pnlPendingOrdersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel14, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtPendingOrderSearch, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addGroup(pnlPendingOrdersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAddOrders, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(31, 31, 31))
            .addGroup(pnlPendingOrdersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pnlPendingOrdersLayout.createSequentialGroup()
                    .addGap(27, 27, 27)
                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(237, Short.MAX_VALUE)))
        );

        jPanel4.add(pnlPendingOrders, new org.netbeans.lib.awtextra.AbsoluteConstraints(45, 33, 615, 310));

        pnlReadyOrders.setBackground(new java.awt.Color(38, 51, 61));
        pnlReadyOrders.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 164, 0)));
        pnlReadyOrders.setPreferredSize(new java.awt.Dimension(600, 300));

        listReadyTables.setBackground(new java.awt.Color(38, 51, 61));
        listReadyTables.setFont(new java.awt.Font("Calibri", 0, 16)); // NOI18N
        listReadyTables.setForeground(new java.awt.Color(255, 255, 255));
        listReadyTables.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Table 1", "Table 2", "Table 3", "Table 4", "Table 5", "Table 6", "Table 7", "Table 8" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        listReadyTables.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listReadyTablesValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(listReadyTables);

        listReadyFoodItems.setBackground(new java.awt.Color(38, 51, 61));
        listReadyFoodItems.setFont(new java.awt.Font("Calibri", 0, 16)); // NOI18N
        listReadyFoodItems.setForeground(new java.awt.Color(255, 255, 255));
        listReadyFoodItems.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listReadyFoodItemsMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(listReadyFoodItems);

        jLabel10.setFont(new java.awt.Font("Calibri", 0, 22)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("Ready Orders");

        btnDelete.setBackground(new java.awt.Color(96, 218, 137));
        btnDelete.setText("Delete");
        btnDelete.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnDeleteMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnDeleteMouseExited(evt);
            }
        });
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        jLabel15.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(255, 255, 255));
        jLabel15.setText("Table numbers");

        javax.swing.GroupLayout pnlReadyOrdersLayout = new javax.swing.GroupLayout(pnlReadyOrders);
        pnlReadyOrders.setLayout(pnlReadyOrdersLayout);
        pnlReadyOrdersLayout.setHorizontalGroup(
            pnlReadyOrdersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlReadyOrdersLayout.createSequentialGroup()
                .addGroup(pnlReadyOrdersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnlReadyOrdersLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel10))
                    .addGroup(pnlReadyOrdersLayout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addGroup(pnlReadyOrdersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlReadyOrdersLayout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnDelete, javax.swing.GroupLayout.DEFAULT_SIZE, 111, Short.MAX_VALUE))
                            .addGroup(pnlReadyOrdersLayout.createSequentialGroup()
                                .addComponent(jLabel15)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40))
        );
        pnlReadyOrdersLayout.setVerticalGroup(
            pnlReadyOrdersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlReadyOrdersLayout.createSequentialGroup()
                .addGroup(pnlReadyOrdersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnlReadyOrdersLayout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, 41, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlReadyOrdersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlReadyOrdersLayout.createSequentialGroup()
                                .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE)
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlReadyOrdersLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(btnDelete))))
                    .addGroup(pnlReadyOrdersLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(29, 29, 29))
        );

        jPanel4.add(pnlReadyOrders, new org.netbeans.lib.awtextra.AbsoluteConstraints(45, 361, 615, 310));

        pnlTables.setBackground(new java.awt.Color(38, 51, 61));
        pnlTables.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 164, 0)));
        pnlTables.setPreferredSize(new java.awt.Dimension(600, 300));
        pnlTables.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        pnlTable1.setBackground(new java.awt.Color(38, 51, 61));

        lblTable1.setBackground(new Color(0, 0, 0, 40));
        lblTable1.setIcon(new javax.swing.ImageIcon("C:\\Users\\admin\\Desktop\\TheRestoManager\\images\\greenfre.png")); // NOI18N
        lblTable1.setToolTipText("Table 1");
        lblTable1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        javax.swing.GroupLayout pnlTable1Layout = new javax.swing.GroupLayout(pnlTable1);
        pnlTable1.setLayout(pnlTable1Layout);
        pnlTable1Layout.setHorizontalGroup(
            pnlTable1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblTable1, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
        );
        pnlTable1Layout.setVerticalGroup(
            pnlTable1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblTable1, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
        );

        pnlTables.add(pnlTable1, new org.netbeans.lib.awtextra.AbsoluteConstraints(31, 24, -1, -1));

        pnlTable5.setBackground(new java.awt.Color(38, 51, 61));

        lblTable5.setBackground(new Color(0, 0, 0, 40));
        lblTable5.setIcon(new javax.swing.ImageIcon("C:\\Users\\admin\\Desktop\\TheRestoManager\\images\\greenfre.png")); // NOI18N
        lblTable5.setToolTipText("Table 5");
        lblTable5.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        javax.swing.GroupLayout pnlTable5Layout = new javax.swing.GroupLayout(pnlTable5);
        pnlTable5.setLayout(pnlTable5Layout);
        pnlTable5Layout.setHorizontalGroup(
            pnlTable5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblTable5, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
        );
        pnlTable5Layout.setVerticalGroup(
            pnlTable5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblTable5, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
        );

        pnlTables.add(pnlTable5, new org.netbeans.lib.awtextra.AbsoluteConstraints(31, 186, -1, -1));

        pnlTable2.setBackground(new java.awt.Color(38, 51, 61));

        lblTable2.setBackground(new Color(0, 0, 0, 40));
        lblTable2.setIcon(new javax.swing.ImageIcon("C:\\Users\\admin\\Desktop\\TheRestoManager\\images\\greenfre.png")); // NOI18N
        lblTable2.setToolTipText("Table 2");
        lblTable2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        javax.swing.GroupLayout pnlTable2Layout = new javax.swing.GroupLayout(pnlTable2);
        pnlTable2.setLayout(pnlTable2Layout);
        pnlTable2Layout.setHorizontalGroup(
            pnlTable2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTable2Layout.createSequentialGroup()
                .addComponent(lblTable2, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        pnlTable2Layout.setVerticalGroup(
            pnlTable2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblTable2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE)
        );

        pnlTables.add(pnlTable2, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 20, 100, -1));

        pnlTable6.setBackground(new java.awt.Color(38, 51, 61));

        lblTable6.setBackground(new Color(0, 0, 0, 40));
        lblTable6.setIcon(new javax.swing.ImageIcon("C:\\Users\\admin\\Desktop\\TheRestoManager\\images\\greenfre.png")); // NOI18N
        lblTable6.setToolTipText("Table 6");
        lblTable6.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        javax.swing.GroupLayout pnlTable6Layout = new javax.swing.GroupLayout(pnlTable6);
        pnlTable6.setLayout(pnlTable6Layout);
        pnlTable6Layout.setHorizontalGroup(
            pnlTable6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTable6Layout.createSequentialGroup()
                .addComponent(lblTable6, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 1, Short.MAX_VALUE))
        );
        pnlTable6Layout.setVerticalGroup(
            pnlTable6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlTable6Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(lblTable6, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pnlTables.add(pnlTable6, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 200, 100, 70));

        pnlTable3.setBackground(new java.awt.Color(38, 51, 61));

        lblTable3.setBackground(new Color(0, 0, 0, 40));
        lblTable3.setIcon(new javax.swing.ImageIcon("C:\\Users\\admin\\Desktop\\TheRestoManager\\images\\greenfre.png")); // NOI18N
        lblTable3.setToolTipText("Table 3");
        lblTable3.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        javax.swing.GroupLayout pnlTable3Layout = new javax.swing.GroupLayout(pnlTable3);
        pnlTable3.setLayout(pnlTable3Layout);
        pnlTable3Layout.setHorizontalGroup(
            pnlTable3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblTable3, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
        );
        pnlTable3Layout.setVerticalGroup(
            pnlTable3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblTable3, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
        );

        pnlTables.add(pnlTable3, new org.netbeans.lib.awtextra.AbsoluteConstraints(337, 24, -1, -1));

        pnlTable7.setBackground(new java.awt.Color(38, 51, 61));

        lblTable7.setBackground(new Color(0, 0, 0, 40));
        lblTable7.setIcon(new javax.swing.ImageIcon("C:\\Users\\admin\\Desktop\\TheRestoManager\\images\\greenfre.png")); // NOI18N
        lblTable7.setToolTipText("Table 7");
        lblTable7.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        javax.swing.GroupLayout pnlTable7Layout = new javax.swing.GroupLayout(pnlTable7);
        pnlTable7.setLayout(pnlTable7Layout);
        pnlTable7Layout.setHorizontalGroup(
            pnlTable7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTable7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTable7, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlTable7Layout.setVerticalGroup(
            pnlTable7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblTable7, javax.swing.GroupLayout.DEFAULT_SIZE, 76, Short.MAX_VALUE)
        );

        pnlTables.add(pnlTable7, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 200, -1, -1));

        pnlTable4.setBackground(new java.awt.Color(38, 51, 61));

        lblTable4.setBackground(new Color(0, 0, 0, 40));
        lblTable4.setIcon(new javax.swing.ImageIcon("C:\\Users\\admin\\Desktop\\TheRestoManager\\images\\greenfre.png")); // NOI18N
        lblTable4.setToolTipText("Table 4");
        lblTable4.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        javax.swing.GroupLayout pnlTable4Layout = new javax.swing.GroupLayout(pnlTable4);
        pnlTable4.setLayout(pnlTable4Layout);
        pnlTable4Layout.setHorizontalGroup(
            pnlTable4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblTable4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 95, Short.MAX_VALUE)
        );
        pnlTable4Layout.setVerticalGroup(
            pnlTable4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblTable4, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)
        );

        pnlTables.add(pnlTable4, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 34, -1, -1));

        pnlTable8.setBackground(new java.awt.Color(38, 51, 61));

        lblTable8.setBackground(new java.awt.Color(38, 51, 61));
        lblTable8.setIcon(new javax.swing.ImageIcon("C:\\Users\\admin\\Desktop\\TheRestoManager\\images\\greenfre.png")); // NOI18N
        lblTable8.setToolTipText("Table 8");
        lblTable8.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        javax.swing.GroupLayout pnlTable8Layout = new javax.swing.GroupLayout(pnlTable8);
        pnlTable8.setLayout(pnlTable8Layout);
        pnlTable8Layout.setHorizontalGroup(
            pnlTable8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTable8Layout.createSequentialGroup()
                .addComponent(lblTable8)
                .addGap(0, 21, Short.MAX_VALUE))
        );
        pnlTable8Layout.setVerticalGroup(
            pnlTable8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblTable8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pnlTables.add(pnlTable8, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 196, -1, 76));

        jPanel4.add(pnlTables, new org.netbeans.lib.awtextra.AbsoluteConstraints(702, 33, 615, 310));

        pnlBills.setBackground(new java.awt.Color(38, 51, 61));
        pnlBills.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 164, 0)));
        pnlBills.setPreferredSize(new java.awt.Dimension(600, 300));

        jLabel9.setFont(new java.awt.Font("Calibri", 0, 16)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Table 1");

        jLabel1.setFont(new java.awt.Font("Calibri", 0, 16)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Table 2");

        jLabel2.setFont(new java.awt.Font("Calibri", 0, 16)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Table 8");

        jLabel3.setFont(new java.awt.Font("Calibri", 0, 16)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Table 7");

        jLabel4.setFont(new java.awt.Font("Calibri", 0, 16)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Table 6");

        jLabel5.setFont(new java.awt.Font("Calibri", 0, 16)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Table 5");

        jLabel6.setFont(new java.awt.Font("Calibri", 0, 16)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Table 3");

        jLabel7.setFont(new java.awt.Font("Calibri", 0, 16)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Table 4");

        txtTable1Cost.setEditable(false);
        txtTable1Cost.setBackground(new java.awt.Color(38, 51, 61));
        txtTable1Cost.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        txtTable1Cost.setForeground(new java.awt.Color(255, 255, 255));
        txtTable1Cost.setBorder(null);

        txtTable3Cost.setEditable(false);
        txtTable3Cost.setBackground(new java.awt.Color(38, 51, 61));
        txtTable3Cost.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        txtTable3Cost.setForeground(new java.awt.Color(255, 255, 255));
        txtTable3Cost.setBorder(null);

        txtTable6Cost.setEditable(false);
        txtTable6Cost.setBackground(new java.awt.Color(38, 51, 61));
        txtTable6Cost.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        txtTable6Cost.setForeground(new java.awt.Color(255, 255, 255));
        txtTable6Cost.setBorder(null);

        txtTable4Cost.setEditable(false);
        txtTable4Cost.setBackground(new java.awt.Color(38, 51, 61));
        txtTable4Cost.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        txtTable4Cost.setForeground(new java.awt.Color(255, 255, 255));
        txtTable4Cost.setBorder(null);

        txtTable5Cost.setEditable(false);
        txtTable5Cost.setBackground(new java.awt.Color(38, 51, 61));
        txtTable5Cost.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        txtTable5Cost.setForeground(new java.awt.Color(255, 255, 255));
        txtTable5Cost.setBorder(null);

        txtTable2Cost.setEditable(false);
        txtTable2Cost.setBackground(new java.awt.Color(38, 51, 61));
        txtTable2Cost.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        txtTable2Cost.setForeground(new java.awt.Color(255, 255, 255));
        txtTable2Cost.setBorder(null);

        txtTable7Cost.setEditable(false);
        txtTable7Cost.setBackground(new java.awt.Color(38, 51, 61));
        txtTable7Cost.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        txtTable7Cost.setForeground(new java.awt.Color(255, 255, 255));
        txtTable7Cost.setBorder(null);

        txtTable8Cost.setEditable(false);
        txtTable8Cost.setBackground(new java.awt.Color(38, 51, 61));
        txtTable8Cost.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        txtTable8Cost.setForeground(new java.awt.Color(255, 255, 255));
        txtTable8Cost.setBorder(null);

        btnBillTable1.setBackground(new java.awt.Color(96, 218, 137));
        btnBillTable1.setText("Bill");
        btnBillTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnBillTable1MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnBillTable1MouseExited(evt);
            }
        });
        btnBillTable1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBillTable1ActionPerformed(evt);
            }
        });

        btnBillTable2.setBackground(new java.awt.Color(96, 218, 137));
        btnBillTable2.setText("Bill");
        btnBillTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnBillTable2MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnBillTable2MouseExited(evt);
            }
        });
        btnBillTable2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBillTable2ActionPerformed(evt);
            }
        });

        btnBillTable3.setBackground(new java.awt.Color(96, 218, 137));
        btnBillTable3.setText("Bill");
        btnBillTable3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnBillTable3MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnBillTable3MouseExited(evt);
            }
        });
        btnBillTable3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBillTable3ActionPerformed(evt);
            }
        });

        btnBillTable4.setBackground(new java.awt.Color(96, 218, 137));
        btnBillTable4.setText("Bill");
        btnBillTable4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnBillTable4MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnBillTable4MouseExited(evt);
            }
        });
        btnBillTable4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBillTable4ActionPerformed(evt);
            }
        });

        btnBillTable5.setBackground(new java.awt.Color(96, 218, 137));
        btnBillTable5.setText("Bill");
        btnBillTable5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnBillTable5MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnBillTable5MouseExited(evt);
            }
        });
        btnBillTable5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBillTable5ActionPerformed(evt);
            }
        });

        btnBillTable6.setBackground(new java.awt.Color(96, 218, 137));
        btnBillTable6.setText("Bill");
        btnBillTable6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnBillTable6MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnBillTable6MouseExited(evt);
            }
        });
        btnBillTable6.addActionListener(this::btnBillTable6ActionPerformed);

        btnBillTable7.setBackground(new java.awt.Color(96, 218, 137));
        btnBillTable7.setText("Bill");
        btnBillTable7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnBillTable7MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnBillTable7MouseExited(evt);
            }
        });
        btnBillTable7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBillTable7ActionPerformed(evt);
            }
        });

        btnBillTable8.setBackground(new java.awt.Color(96, 218, 137));
        btnBillTable8.setText("Bill");
        btnBillTable8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnBillTable8MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnBillTable8MouseExited(evt);
            }
        });
        btnBillTable8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBillTable8ActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N

        javax.swing.GroupLayout pnlBillsLayout = new javax.swing.GroupLayout(pnlBills);
        pnlBills.setLayout(pnlBillsLayout);
        pnlBillsLayout.setHorizontalGroup(
            pnlBillsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBillsLayout.createSequentialGroup()
                .addGroup(pnlBillsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlBillsLayout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addGroup(pnlBillsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addGroup(pnlBillsLayout.createSequentialGroup()
                                .addGap(4, 4, 4)
                                .addComponent(txtTable5Cost, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnBillTable5, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(pnlBillsLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2, 2, 2)
                        .addGroup(pnlBillsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addGroup(pnlBillsLayout.createSequentialGroup()
                                .addComponent(txtTable1Cost, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnBillTable1, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addGroup(pnlBillsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlBillsLayout.createSequentialGroup()
                        .addGroup(pnlBillsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel4))
                        .addGap(95, 95, 95))
                    .addGroup(pnlBillsLayout.createSequentialGroup()
                        .addGroup(pnlBillsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlBillsLayout.createSequentialGroup()
                                .addComponent(txtTable6Cost, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnBillTable6, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnlBillsLayout.createSequentialGroup()
                                .addComponent(txtTable2Cost, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnBillTable2, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(29, 34, Short.MAX_VALUE)))
                .addGroup(pnlBillsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlBillsLayout.createSequentialGroup()
                        .addGroup(pnlBillsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addGroup(pnlBillsLayout.createSequentialGroup()
                                .addComponent(txtTable3Cost, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnBillTable3, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(23, 23, 23)
                        .addGroup(pnlBillsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addGroup(pnlBillsLayout.createSequentialGroup()
                                .addComponent(txtTable4Cost, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnBillTable4, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(pnlBillsLayout.createSequentialGroup()
                        .addGroup(pnlBillsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(pnlBillsLayout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(95, 95, 95))
                            .addGroup(pnlBillsLayout.createSequentialGroup()
                                .addComponent(txtTable7Cost, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnBillTable7, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)))
                        .addGroup(pnlBillsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlBillsLayout.createSequentialGroup()
                                .addComponent(txtTable8Cost, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnBillTable8, javax.swing.GroupLayout.DEFAULT_SIZE, 62, Short.MAX_VALUE))
                            .addComponent(jLabel2))))
                .addGap(19, 19, 19))
        );
        pnlBillsLayout.setVerticalGroup(
            pnlBillsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBillsLayout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addGroup(pnlBillsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel7)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnlBillsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtTable1Cost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBillTable1)
                    .addComponent(txtTable2Cost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBillTable2)
                    .addComponent(txtTable3Cost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBillTable3)
                    .addComponent(txtTable4Cost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBillTable4)
                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(78, 78, 78)
                .addGroup(pnlBillsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel4)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2))
                .addGap(31, 31, 31)
                .addGroup(pnlBillsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtTable5Cost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtTable6Cost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtTable7Cost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtTable8Cost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBillTable5)
                    .addComponent(btnBillTable6)
                    .addComponent(btnBillTable7)
                    .addComponent(btnBillTable8))
                .addGap(43, 43, 43))
        );

        jPanel4.add(pnlBills, new org.netbeans.lib.awtextra.AbsoluteConstraints(702, 361, 615, 310));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBillTable8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBillTable8ActionPerformed
        int result = JOptionPane.showConfirmDialog(null, "Do you want to split the bill", "Spilt bill", JOptionPane.YES_NO_OPTION);
        if (result == JOptionPane.YES_OPTION) {
            String txt = JOptionPane.showInputDialog(null, "Between how many groups you want to split the bill");
            while (Integer.parseInt(txt) > Double.parseDouble(txtTable8Cost.getText().split("₹")[1])) {
                JOptionPane.showMessageDialog(null, "Cannot split the bill as there are more number of people than the cost");
                txt = JOptionPane.showInputDialog(null, "Between how many groups you want to split the bill");
            }
            JOptionPane.showMessageDialog(null, "Each one has to pay: ₹" + splitBill(Integer.parseInt(txt), Double.parseDouble(txtTable8Cost.getText().split("₹")[1])));
        }
        lblTable8.setIcon(MyConstants.GREENTABLE);
        try {
            Bill b = new Bill();
            ResultSet rs = readyOrdersTable.getReadyFoodOrders(8);
            while (rs.next()) {
                b.addOrder(rs.getString("foodname"), Double.parseDouble(fi.getFoodPrice(rs.getString("foodname"))), rs.getInt("quantity"));
            }
            b.createInvoice();
            String email = JOptionPane.showInputDialog("Enter the email address of the customer: ");

            if (email != null) {
                SendEmail se = new SendEmail();
                se.sendTo(email);
            }
            if (Desktop.isDesktopSupported()) {
                try {
                    Desktop.getDesktop().open(MyConstants.PDFFILE);
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(null, "Issue while previewing" + ex);
                }
            }
            foodToBeMade.deleteOrders(8);
            txtTable8Cost.setText("");
            setCost(0.00);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Issue while generating bill" + e);
        }
    }//GEN-LAST:event_btnBillTable8ActionPerformed

    private void btnBillTable8MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnBillTable8MouseExited
        mouseExitedAnimation(btnBillTable8);
    }//GEN-LAST:event_btnBillTable8MouseExited

    private void btnBillTable8MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnBillTable8MouseEntered
        mouseEnteredAnimation(btnBillTable8);
    }//GEN-LAST:event_btnBillTable8MouseEntered

    private void btnBillTable7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBillTable7ActionPerformed
        int result = JOptionPane.showConfirmDialog(null, "Do you want to split the bill", "Spilt bill", JOptionPane.YES_NO_OPTION);
        if (result == JOptionPane.YES_OPTION) {
            String txt = JOptionPane.showInputDialog(null, "Between how many groups you want to split the bill");
            while (Integer.parseInt(txt) > Double.parseDouble(txtTable7Cost.getText().split("₹")[1])) {
                JOptionPane.showMessageDialog(null, "Cannot split the bill as there are more number of people than the cost");
                txt = JOptionPane.showInputDialog(null, "Between how many groups you want to split the bill");
            }
            JOptionPane.showMessageDialog(null, "Each one has to pay: ₹" + splitBill(Integer.parseInt(txt), Double.parseDouble(txtTable7Cost.getText().split("₹")[1])));
        }
        lblTable7.setIcon(MyConstants.GREENTABLE);
        try {
            Bill b = new Bill();
            ResultSet rs = readyOrdersTable.getReadyFoodOrders(7);
            while (rs.next()) {
                b.addOrder(rs.getString("foodname"), Double.parseDouble(fi.getFoodPrice(rs.getString("foodname"))), rs.getInt("quantity"));
            }
            b.createInvoice();
            String email = JOptionPane.showInputDialog("Enter the email address of the customer: ");

            if (email != null) {
                SendEmail se = new SendEmail();
                se.sendTo(email);
            }
            if (Desktop.isDesktopSupported()) {
                try {
                    Desktop.getDesktop().open(MyConstants.PDFFILE);
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(null, "Issue while previewing" + ex);
                }
            }
            foodToBeMade.deleteOrders(7);
            txtTable7Cost.setText("");
            setCost(0.00);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Issue while generating bill" + e);
        }
    }//GEN-LAST:event_btnBillTable7ActionPerformed

    private void btnBillTable7MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnBillTable7MouseExited
        mouseExitedAnimation(btnBillTable7);
    }//GEN-LAST:event_btnBillTable7MouseExited

    private void btnBillTable7MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnBillTable7MouseEntered
        mouseEnteredAnimation(btnBillTable7);
    }//GEN-LAST:event_btnBillTable7MouseEntered

    private void btnBillTable6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBillTable6ActionPerformed
        int result = JOptionPane.showConfirmDialog(null, "Do you want to split the bill", "Spilt bill", JOptionPane.YES_NO_OPTION);
        if (result == JOptionPane.YES_OPTION) {
            String txt = JOptionPane.showInputDialog(null, "Between how many groups you want to split the bill");
            while (Integer.parseInt(txt) > Double.parseDouble(txtTable6Cost.getText().split("₹")[1])) {
                JOptionPane.showMessageDialog(null, "Cannot split the bill as there are more number of people than the cost");
                txt = JOptionPane.showInputDialog(null, "Between how many groups you want to split the bill");
            }
            JOptionPane.showMessageDialog(null, "Each one has to pay: ₹" + splitBill(Integer.parseInt(txt), Double.parseDouble(txtTable6Cost.getText().split("₹")[1])));
        }
        lblTable6.setIcon(MyConstants.GREENTABLE);
        try {
            Bill b = new Bill();
            ResultSet rs = readyOrdersTable.getReadyFoodOrders(6);
            while (rs.next()) {
                b.addOrder(rs.getString("foodname"), Double.parseDouble(fi.getFoodPrice(rs.getString("foodname"))), rs.getInt("quantity"));
            }
            b.createInvoice();
            String email = JOptionPane.showInputDialog("Enter the email address of the customer: ");

            if (email != null) {
                SendEmail se = new SendEmail();
                se.sendTo(email);
            }
            if (Desktop.isDesktopSupported()) {
                try {
                    Desktop.getDesktop().open(MyConstants.PDFFILE);
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(null, "Issue while previewing" + ex);
                }
            }
            foodToBeMade.deleteOrders(6);
            txtTable6Cost.setText("");
            setCost(0.00);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Issue while generating bill" + e);
        }
    }//GEN-LAST:event_btnBillTable6ActionPerformed

    private void btnBillTable6MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnBillTable6MouseExited
        mouseExitedAnimation(btnBillTable6);
    }//GEN-LAST:event_btnBillTable6MouseExited

    private void btnBillTable6MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnBillTable6MouseEntered
        mouseEnteredAnimation(btnBillTable6);
    }//GEN-LAST:event_btnBillTable6MouseEntered

    private void btnBillTable5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBillTable5ActionPerformed
        int result = JOptionPane.showConfirmDialog(null, "Do you want to split the bill", "Spilt bill", JOptionPane.YES_NO_OPTION);
        if (result == JOptionPane.YES_OPTION) {
            String txt = JOptionPane.showInputDialog(null, "Between how many groups you want to split the bill");
            while (Integer.parseInt(txt) > Double.parseDouble(txtTable5Cost.getText().split("₹")[1])) {
                JOptionPane.showMessageDialog(null, "Cannot split the bill as there are more number of people than the cost");
                txt = JOptionPane.showInputDialog(null, "Between how many groups you want to split the bill");
            }
            JOptionPane.showMessageDialog(null, "Each one has to pay: ₹" + splitBill(Integer.parseInt(txt), Double.parseDouble(txtTable5Cost.getText().split("₹")[1])));
        }
        lblTable5.setIcon(MyConstants.GREENTABLE);
        try {
            Bill b = new Bill();
            ResultSet rs = readyOrdersTable.getReadyFoodOrders(5);
            while (rs.next()) {
                b.addOrder(rs.getString("foodname"), Double.parseDouble(fi.getFoodPrice(rs.getString("foodname"))), rs.getInt("quantity"));
            }
            b.createInvoice();
            String email = JOptionPane.showInputDialog("Enter the email address of the customer: ");
            if (email != null) {
                SendEmail se = new SendEmail();
                se.sendTo(email);
            }
            if (Desktop.isDesktopSupported()) {
                try {
                    Desktop.getDesktop().open(MyConstants.PDFFILE);
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(null, "Issue while previewing" + ex);
                }
            }
            foodToBeMade.deleteOrders(5);
            txtTable5Cost.setText("");
            setCost(0.00);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Issue while generating bill" + e);
        }
    }//GEN-LAST:event_btnBillTable5ActionPerformed

    private void btnBillTable5MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnBillTable5MouseExited
        mouseExitedAnimation(btnBillTable5);
    }//GEN-LAST:event_btnBillTable5MouseExited

    private void btnBillTable5MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnBillTable5MouseEntered
        mouseEnteredAnimation(btnBillTable5);
    }//GEN-LAST:event_btnBillTable5MouseEntered

    private void btnBillTable4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBillTable4ActionPerformed
        int result = JOptionPane.showConfirmDialog(null, "Do you want to split the bill", "Spilt bill", JOptionPane.YES_NO_OPTION);
        if (result == JOptionPane.YES_OPTION) {
            String txt = JOptionPane.showInputDialog(null, "Between how many groups you want to split the bill");
            while (Integer.parseInt(txt) > Double.parseDouble(txtTable4Cost.getText().split("₹")[1])) {
                JOptionPane.showMessageDialog(null, "Cannot split the bill as there are more number of people than the cost");
                txt = JOptionPane.showInputDialog(null, "Between how many groups you want to split the bill");
            }
            JOptionPane.showMessageDialog(null, "Each one has to pay: ₹" + splitBill(Integer.parseInt(txt), Double.parseDouble(txtTable4Cost.getText().split("₹")[1])));
        }
        lblTable4.setIcon(MyConstants.GREENTABLE);
        try {
            Bill b = new Bill();
            ResultSet rs = readyOrdersTable.getReadyFoodOrders(4);
            while (rs.next()) {
                b.addOrder(rs.getString("foodname"), Double.parseDouble(fi.getFoodPrice(rs.getString("foodname"))), rs.getInt("quantity"));
            }
            b.createInvoice();
            String email = JOptionPane.showInputDialog("Enter the email address of the customer: ");
            if (email != null) {
                SendEmail se = new SendEmail();
                se.sendTo(email);
            }
            if (Desktop.isDesktopSupported()) {
                try {
                    Desktop.getDesktop().open(MyConstants.PDFFILE);
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(null, "Issue while previewing" + ex);
                }
            }
            foodToBeMade.deleteOrders(4);
            txtTable4Cost.setText("");
            setCost(0.00);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Issue while generating bill" + e);
        }
    }//GEN-LAST:event_btnBillTable4ActionPerformed

    private void btnBillTable4MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnBillTable4MouseExited
        mouseExitedAnimation(btnBillTable4);
    }//GEN-LAST:event_btnBillTable4MouseExited

    private void btnBillTable4MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnBillTable4MouseEntered
        mouseEnteredAnimation(btnBillTable4);
    }//GEN-LAST:event_btnBillTable4MouseEntered

    private void btnBillTable3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBillTable3ActionPerformed
        int result = JOptionPane.showConfirmDialog(null, "Do you want to split the bill", "Spilt bill", JOptionPane.YES_NO_OPTION);
        if (result == JOptionPane.YES_OPTION) {
            String txt = JOptionPane.showInputDialog(null, "Between how many groups you want to split the bill");
            while (Integer.parseInt(txt) > Double.parseDouble(txtTable3Cost.getText().split("₹")[1])) {
                JOptionPane.showMessageDialog(null, "Cannot split the bill as there are more number of people than the cost");
                txt = JOptionPane.showInputDialog(null, "Between how many groups you want to split the bill");
            }
            JOptionPane.showMessageDialog(null, "Each one has to pay: ₹" + splitBill(Integer.parseInt(txt), Double.parseDouble(txtTable3Cost.getText().split("₹")[1])));
        }
        lblTable3.setIcon(MyConstants.GREENTABLE);
        try {
            Bill b = new Bill();
            ResultSet rs = readyOrdersTable.getReadyFoodOrders(3);
            while (rs.next()) {
                b.addOrder(rs.getString("foodname"), Double.parseDouble(fi.getFoodPrice(rs.getString("foodname"))), rs.getInt("quantity"));
            }
            b.createInvoice();
            String email = JOptionPane.showInputDialog("Enter the email address of the customer: ");
            if (email != null) {
                SendEmail se = new SendEmail();
                se.sendTo(email);
            }
            if (Desktop.isDesktopSupported()) {
                try {
                    Desktop.getDesktop().open(MyConstants.PDFFILE);
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(null, "Issue while previewing" + ex);
                }
            }
            foodToBeMade.deleteOrders(3);
            txtTable3Cost.setText("");
            setCost(0.00);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Issue while generating bill" + e);
        }
    }//GEN-LAST:event_btnBillTable3ActionPerformed

    private void btnBillTable3MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnBillTable3MouseExited
        mouseExitedAnimation(btnBillTable3);
    }//GEN-LAST:event_btnBillTable3MouseExited

    private void btnBillTable3MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnBillTable3MouseEntered
        mouseEnteredAnimation(btnBillTable3);
    }//GEN-LAST:event_btnBillTable3MouseEntered

    private void btnBillTable2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBillTable2ActionPerformed
        int result = JOptionPane.showConfirmDialog(null, "Do you want to split the bill", "Spilt bill", JOptionPane.YES_NO_OPTION);
        if (result == JOptionPane.YES_OPTION) {
            String txt = JOptionPane.showInputDialog(null, "Between how many groups you want to split the bill");
            while (Integer.parseInt(txt) > Double.parseDouble(txtTable2Cost.getText().split("₹")[1])) {
                JOptionPane.showMessageDialog(null, "Cannot split the bill as there are more number of people than the cost");
                txt = JOptionPane.showInputDialog(null, "Between how many groups you want to split the bill");
            }

            System.out.println(txt + "bill 2");
            if ((txt != null)) {
                JOptionPane.showConfirmDialog(null, "Each one has to pay: ₹" + splitBill(Integer.parseInt(txt), Double.parseDouble(txtTable2Cost.getText().split("₹")[1].trim())));
            }
        }
        lblTable2.setIcon(MyConstants.GREENTABLE);
        try {
            Bill b = new Bill();
            ResultSet rs = readyOrdersTable.getReadyFoodOrders(2);
            while (rs.next()) {
                b.addOrder(rs.getString("foodname"), Double.parseDouble(fi.getFoodPrice(rs.getString("foodname"))), rs.getInt("quantity"));
            }
            b.createInvoice();
            String email = JOptionPane.showInputDialog("Enter the email address of the customer: ");
            if (email != null) {
                SendEmail se = new SendEmail();
                se.sendTo(email);
            }
            if (Desktop.isDesktopSupported()) {
                try {
                    Desktop.getDesktop().open(MyConstants.PDFFILE);
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(null, "Issue while previewing" + ex);
                }
            }
            foodToBeMade.deleteOrders(2);
            txtTable2Cost.setText("");
            setCost(0.00);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Issue while generating bill" + e);
        }
    }//GEN-LAST:event_btnBillTable2ActionPerformed

    private void btnBillTable2MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnBillTable2MouseExited
        mouseExitedAnimation(btnBillTable2);
    }//GEN-LAST:event_btnBillTable2MouseExited

    private void btnBillTable2MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnBillTable2MouseEntered
        mouseEnteredAnimation(btnBillTable2);
    }//GEN-LAST:event_btnBillTable2MouseEntered

    private void btnBillTable1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBillTable1ActionPerformed
        int result = JOptionPane.showConfirmDialog(null, "Do you want to split the bill", "Spilt bill", JOptionPane.YES_NO_OPTION);
        if (result == JOptionPane.YES_OPTION) {
            String txt = JOptionPane.showInputDialog(null, "Between how many groups you want to split the bill");
            while (Integer.parseInt(txt) > Double.parseDouble(txtTable1Cost.getText().split("₹")[1])) {
                JOptionPane.showMessageDialog(null, "Cannot split the bill as there are more number of people than the cost");
                txt = JOptionPane.showInputDialog(null, "Between how many groups you want to split the bill");
            }
            while (Integer.parseInt(txt) > Double.parseDouble(txtTable1Cost.getText().split("₹")[1])) {
                JOptionPane.showMessageDialog(null, "Cannot split the bill as there are more number of people than the cost");
                txt = JOptionPane.showInputDialog(null, "Between how many groups you want to split the bill");
            }
            JOptionPane.showMessageDialog(null, "Each one has to pay: ₹" + splitBill(Integer.parseInt(txt), Double.parseDouble(txtTable1Cost.getText().split("₹")[1])));
        }
        lblTable1.setIcon(MyConstants.GREENTABLE);
        try {
            Bill b = new Bill();
            ResultSet rs = readyOrdersTable.getReadyFoodOrders(1);
            while (rs.next()) {
                b.addOrder(rs.getString("foodname"), Double.parseDouble(fi.getFoodPrice(rs.getString("foodname"))), rs.getInt("quantity"));
            }
            b.createInvoice();
            String email = JOptionPane.showInputDialog("Enter the email address of the customer: ");
            if (email != null) {
                SendEmail se = new SendEmail();
                se.sendTo(email);
            }
            if (Desktop.isDesktopSupported()) {
                try {
                    Desktop.getDesktop().open(MyConstants.PDFFILE);
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(null, "Issue while previewing" + ex);
                }
            }
            foodToBeMade.deleteOrders(1);
            txtTable1Cost.setText("");
            setCost(0.00);
        } catch (HeadlessException e) {
            JOptionPane.showMessageDialog(null, "Issue while generating bill h" + e);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Issue while generating bill n" + e);
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Issue while generating bill sql" + e);
        }
        // }
    }//GEN-LAST:event_btnBillTable1ActionPerformed

    private void btnBillTable1MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnBillTable1MouseExited
        mouseExitedAnimation(btnBillTable1);
    }//GEN-LAST:event_btnBillTable1MouseExited

    private void btnBillTable1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnBillTable1MouseEntered
        mouseEnteredAnimation(btnBillTable1);
    }//GEN-LAST:event_btnBillTable1MouseEntered

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        String selectedOrder = listReadyFoodItems.getSelectedValue();
        int tableNo = listReadyTables.getSelectedIndex() + 1;
        readyOrdersTable.deleteOrder(selectedOrder.split("x")[0].trim(), tableNo);
        System.out.println(readyOrders.remove(selectedOrder));
        listReadyFoodItems.setListData(readyOrders);
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnDeleteMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnDeleteMouseExited
        mouseExitedAnimation(btnDelete);
    }//GEN-LAST:event_btnDeleteMouseExited

    private void btnDeleteMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnDeleteMouseEntered
        mouseEnteredAnimation(btnDelete);
    }//GEN-LAST:event_btnDeleteMouseEntered

    private void listReadyFoodItemsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listReadyFoodItemsMouseClicked
        if (evt.getClickCount() == 2) {
            listReadyFoodItems.removeAll();
        }
    }//GEN-LAST:event_listReadyFoodItemsMouseClicked

    private void listReadyTablesValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listReadyTablesValueChanged
        if (count % 2 == 0) {
            int tableNo = listReadyTables.getSelectedIndex() + 1;
            setList(tableNo);
            count = count + 2;
        }
    }//GEN-LAST:event_listReadyTablesValueChanged

    private void pnlPendingOrdersMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pnlPendingOrdersMouseExited
        //        pnlPendingOrders.setSize(pnlPendingOrders.getWidth() - 10, pnlPendingOrders.getHeight() - 7);
        //        Point p = pnlPendingOrders.getLocation();
        //        pnlPendingOrders.setLocation((int)p.getX()+5, (int)p.getY()+3);

    }//GEN-LAST:event_pnlPendingOrdersMouseExited

    private void pnlPendingOrdersMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pnlPendingOrdersMouseEntered
        //        pnlPendingOrders.setSize(pnlPendingOrders.getWidth() + 10, pnlPendingOrders.getHeight() + 7);
        //        Point p = pnlPendingOrders.getLocation();
        //        pnlPendingOrders.setLocation((int)p.getX()-5, (int)p.getY()-3);
    }//GEN-LAST:event_pnlPendingOrdersMouseEntered

    private void listTablesValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listTablesValueChanged
        Vector<String> items = new Vector<>();
        try {
            ResultSet rs = foodToBeMade.getFoodItemsToBeMade(listTables.getSelectedIndex() + 1);
            while (rs.next()) {
                items.add(rs.getString(1));
            }
            listPendingFoodItems.removeAll();
            listPendingFoodItems.setListData(items);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_listTablesValueChanged

    private void btnAddOrdersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddOrdersActionPerformed
        ad.setVisible(true);
    }//GEN-LAST:event_btnAddOrdersActionPerformed

    private void btnAddOrdersMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAddOrdersMouseExited
        mouseExitedAnimation(btnAddOrders);
    }//GEN-LAST:event_btnAddOrdersMouseExited

    private void btnAddOrdersMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAddOrdersMouseEntered
        mouseEnteredAnimation(btnAddOrders);
    }//GEN-LAST:event_btnAddOrdersMouseEntered

    /**
     * This method will set the green table icon with red table icon indicating
     * that the table is booked.
     *
     * @param tableNo table number
     */
    public void bookTable(int tableNo) {
        switch (tableNo) {
            case 1:
                lblTable1.setIcon(MyConstants.REDTABLE);
                break;
            case 2:
                lblTable2.setIcon(MyConstants.REDTABLE);
                break;
            case 3:
                lblTable3.setIcon(MyConstants.REDTABLE);
                break;
            case 4:
                lblTable4.setIcon(MyConstants.REDTABLE);
                break;
            case 5:
                lblTable5.setIcon(MyConstants.REDTABLE);
                break;
            case 6:
                lblTable6.setIcon(MyConstants.REDTABLE);
                break;
            case 7:
                lblTable7.setIcon(MyConstants.REDTABLE);
                break;
            case 8:
                lblTable8.setIcon(MyConstants.REDTABLE);
                break;
            default:
                break;
        }
    }

    /**
     * This method is used to set the list of the pending orders.
     */
    public void setPendingOrders() {
        foodItemsToBemade.removeAllElements();
        try {
            ResultSet rs = foodToBeMade.getFoodItemsToBeMade();
            while (rs.next()) {
                foodItemsToBemade.add(rs.getString(1) + " x" + rs.getString(2));
            }
            listPendingFoodItems.setListData(foodItemsToBemade);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Issue while setting pending orders: " + e);
        }
    }

    /**
     * This method is used to set the list of the ready orders.
     *
     * @param tableNo table number for which the order is ready.
     */
    public void setList(int tableNo) {
        readyOrders.removeAllElements();
        System.out.println("Setting ready orderss");
        listReadyFoodItems.removeAll();
        ResultSet readyFood = readyOrdersTable.getReadyFoodOrders(tableNo);
        try {
            while (readyFood.next()) {
                readyOrders.add(readyFood.getString("foodname") + readyFood.getString(2));
            }
            selectTable(tableNo);
            listReadyFoodItems.setListData(readyOrders);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Issue while fetching ready orders" + e);
        }
    }

    /**
     * This method is used to set the list of the ready orders.
     *
     * @param orderWithTable object for orders that are ready and that are to
     * shown on the ready order list.
     */
    public void addToReadyOrderList(Object orderWithTable) {
        TrayIcon td = new TrayIcon();
        Map<Map<String, Integer>, Integer> map = (Map<Map<String, Integer>, Integer>) orderWithTable;
        Map<String, Integer> readyOrderWithTable = null;
        for (Entry<Map<String, Integer>, Integer> entry : map.entrySet()) {
            readyOrderWithTable = entry.getKey();
        }
        String query = "INSERT INTO readyorders(foodname, quantity, tableno) VALUES (?, ?, ?)";
        try {
            PreparedStatement ps = conn.prepareStatement(query);
            for (Entry<String, Integer> entry : readyOrderWithTable.entrySet()) {
                ps.setString(1, (String) entry.getKey());
                foodToBeMade.deleteFromFoodToBeMade((String) entry.getKey());
                ps.setInt(2, (int) entry.getValue());
                td.displayTray((String) entry.getKey(), (int) map.get(readyOrderWithTable));
            }
            ps.setInt(3, (int) map.get(readyOrderWithTable));
            ps.execute();
            removeFromPendingOrders();
            setList((int) map.get(readyOrderWithTable));
            blinkPanel();
            Toolkit.getDefaultToolkit().beep();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Issue while adding ready orders" + e);
        }
    }

    /**
     * This method will calculate the total cost of all the food items ordered
     * for table.
     *
     * @param tableNo number of the table for which the cost is to be
     * calculated.
     */
    public void calculateCostOfTable(int tableNo) {
        try {
            System.out.println("COST: ");
            ResultSet resultSet = foodToBeMade.getFoodItemsToBeMade(tableNo);
            System.out.println("COST: " + resultSet);
            while (resultSet.next()) {
                String query = "SELECT foodprice FROM fooditems where foodname = '" + resultSet.getString(1) + "'";
                System.out.println(query);
                PreparedStatement ps = conn.prepareStatement(query);
                ResultSet rs = ps.executeQuery();
                rs.next();
                cost += (rs.getInt(1) * resultSet.getInt(2));
                System.out.println(cost);
                setCostOfTable(tableNo);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Issue while showing cost " + e);
        }
    }

    /**
     * This method is used to set the cost of the table on textfield.
     *
     * @param tableNo number of the table for which cost is to be tested.
     */
    public void setCostOfTable(int tableNo) {
        if (tableNo == 1) {
            txtTable1Cost.setText("₹" + cost + "");
        } else if (tableNo == 2) {
            txtTable2Cost.setText("₹" + cost + "");
        } else if (tableNo == 3) {
            txtTable3Cost.setText("₹" + cost + "");
        } else if (tableNo == 4) {
            txtTable4Cost.setText("₹" + cost + "");
        } else if (tableNo == 5) {
            txtTable5Cost.setText("₹" + cost + "");
        } else if (tableNo == 6) {
            txtTable6Cost.setText("₹" + cost + "");
        } else if (tableNo == 7) {
            txtTable7Cost.setText("₹" + cost + "");
        } else if (tableNo == 8) {
            txtTable8Cost.setText("₹" + cost + "");
        }
    }

    private void createServer() {
        new Thread(new Runnable() {
            public void run() {
                try {
                    serverSocket = new ServerSocket(4562);
                    clientSocket = serverSocket.accept();
                    is = clientSocket.getInputStream();
                    ois = new ObjectInputStream(is);
                    OutputStream os = clientSocket.getOutputStream();
                    oos = new ObjectOutputStream(os);
                    ad = new AddOrder(oos, Dashboard.this);
                    checkForOrders();
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Issue while creating server: " + e);
                }
            }
        }).start();
    }

    /**
     * This method will continously check if the pending food item is ready or
     * not.
     */
    public void checkForOrders() {
        try {
            new Thread(new Runnable() {
                @Override
                public void run() {
                    try {
                        while (true) {
                            addToReadyOrderList(ois.readObject());//This line will recieve status of ready food items that are checked by chef.
                        }
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, "Isssssueee " + e);
                    }
                }
            }).start();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Issuue while recieving notiofications" + e);
        }
    }

    /**
     * This method will remove the food item from the pendingOrder list if the
     * item is prepared
     */
    public void removeFromPendingOrders() {
        foodItemsToBemade.removeAllElements();
        String query = "SELECT foodtobemade.foodname FROM foodtobemade LEFT JOIN readyorders ON readyorders.foodname = foodtobemade.foodname WHERE readyorders.foodname IS NULL";
        try {
            PreparedStatement ps = conn.prepareCall(query);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                foodItemsToBemade.add(rs.getString(1));
            }
            listPendingFoodItems.setListData(foodItemsToBemade);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Issue while fetching foodname: " + e);
        }
    }

    /**
     * This method is used to select table from the list of tables.
     */
    public void selectTable(int tableNo) {
        listReadyTables.setSelectedIndex(tableNo - 1);
    }

    //FFA400
    /**
     * This method is used to blink the ready orders panel whenever a ready
     * order is received.
     */
    public void blinkPanel() {
        pnlReadyOrders.setBorder(new LineBorder(Color.red));
        t = new Timer(100, new ActionListener() {//This will create timer for every 100 milliseconds
            private int i = 0, count = 0;
            @Override
            //This method is invoked after every 100 milliseconds
            public void actionPerformed(ActionEvent ae) {
                if (i == 0) {
                    pnlReadyOrders.setBorder(new LineBorder(Color.green));
                    i++;
                } else if (i == 1) {
                    pnlReadyOrders.setBorder(new LineBorder(Color.red));
                    i = 0;
                }
                count++;
                if (count == 30) {
                    t.stop();
                    pnlReadyOrders.setBorder(new LineBorder(Color.decode("#FFA400")));
                }
            }
        });
        t.start();
    }

    private void addDocumentListenerToSearch() {
        txtPendingOrderSearch.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(javax.swing.event.DocumentEvent e) {
                search();
            }

            @Override
            public void removeUpdate(javax.swing.event.DocumentEvent e) {
                search();
            }

            @Override
            public void changedUpdate(javax.swing.event.DocumentEvent e) {
            }
        });
    }

    /**
     * This method is used to search the for particular key in database.
     */
    public void search() {
        String key = txtPendingOrderSearch.getText();
        String searchQuery = "";
        PreparedStatement ps;
        if (!key.equals("")) {
            try {
                ResultSet rs = foodToBeMade.search(key);
                Vector<String> items = new Vector<>();
                while (rs.next()) {
                    items.add(rs.getString("foodname"));
                }
                listPendingFoodItems.removeAll();
                listPendingFoodItems.setListData(items);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Issue while searching: " + e);
            }
        } else {
            try {
                ResultSet rs = foodToBeMade.getFoodItemsToBeMade();
                Vector<String> items = new Vector<>();
                while (rs.next()) {
                    items.add(rs.getString("foodname"));
                }
                listPendingFoodItems.removeAll();
                listPendingFoodItems.setListData(items);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Issue while searching: " + e);
            }
        }
    }

    /**
     * This method is used to return the split bill amount
     * @param noOfPeople
     * @param cost
     * @return 
     */
    public double splitBill(int noOfPeople, double cost) {
        return (cost / noOfPeople);
    }

    /**
     * This method is used to set cost of the total food ordered for the table.
     *
     * @param cost the value of the cost.
     */
    public void setCost(double cost) {
        this.cost = cost;
    }

    /**
     * This method is used for changing the size and the location of of the
     * button on hover for an animation effect.
     *
     * @param jb the button for which size has to be changed
     */
    public void mouseEnteredAnimation(JButton jb) {
        jb.setSize(jb.getWidth() + 10, jb.getHeight() + 7);
        Point p = jb.getLocation();
        jb.setLocation((int) p.getX() - 5, (int) p.getY() - 3);
    }
    
    /**
     * This method is used for changing the size and the location of of the
     * button on hover for an animation effect.
     *
     * @param jb the button for which size has to be changed
     */
    public void mouseExitedAnimation(JButton jb) {
        jb.setSize(jb.getWidth() - 10, jb.getHeight() - 7);
        Point p = jb.getLocation();
        jb.setLocation((int) p.getX() + 5, (int) p.getY() + 3);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Dashboard().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddOrders;
    private javax.swing.JButton btnBillTable1;
    private javax.swing.JButton btnBillTable2;
    private javax.swing.JButton btnBillTable3;
    private javax.swing.JButton btnBillTable4;
    private javax.swing.JButton btnBillTable5;
    private javax.swing.JButton btnBillTable6;
    private javax.swing.JButton btnBillTable7;
    private javax.swing.JButton btnBillTable8;
    private javax.swing.JButton btnDelete;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel lblTable1;
    private javax.swing.JLabel lblTable2;
    private javax.swing.JLabel lblTable3;
    private javax.swing.JLabel lblTable4;
    private javax.swing.JLabel lblTable5;
    private javax.swing.JLabel lblTable6;
    private javax.swing.JLabel lblTable7;
    private javax.swing.JLabel lblTable8;
    private javax.swing.JList<String> listPendingFoodItems;
    private javax.swing.JList<String> listReadyFoodItems;
    private javax.swing.JList<String> listReadyTables;
    private javax.swing.JList<String> listTables;
    private javax.swing.JPanel pnlBills;
    private javax.swing.JPanel pnlPendingOrders;
    private javax.swing.JPanel pnlReadyOrders;
    private javax.swing.JPanel pnlTable1;
    private javax.swing.JPanel pnlTable2;
    private javax.swing.JPanel pnlTable3;
    private javax.swing.JPanel pnlTable4;
    private javax.swing.JPanel pnlTable5;
    private javax.swing.JPanel pnlTable6;
    private javax.swing.JPanel pnlTable7;
    private javax.swing.JPanel pnlTable8;
    private javax.swing.JPanel pnlTables;
    private javax.swing.JTextField txtPendingOrderSearch;
    private javax.swing.JTextField txtTable1Cost;
    private javax.swing.JTextField txtTable2Cost;
    private javax.swing.JTextField txtTable3Cost;
    private javax.swing.JTextField txtTable4Cost;
    private javax.swing.JTextField txtTable5Cost;
    private javax.swing.JTextField txtTable6Cost;
    private javax.swing.JTextField txtTable7Cost;
    private javax.swing.JTextField txtTable8Cost;
    // End of variables declaration//GEN-END:variables
}
