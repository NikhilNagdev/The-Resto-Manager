
import DatabaseTables.MySqlConnect;
import constants.MyConstants;

import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.net.Socket;
import java.sql.Connection;
import java.util.LinkedHashMap;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author admin
 */
public class ChefPage extends javax.swing.JFrame {


    /**
     * Creates new form ChefPage
     */
    public ChefPage() {
        initComponents();
        setSize(903, 535);
        this.setLocationRelativeTo(null);
        this.setResizable(false); 
        this.setIconImage(MyConstants.FRAMELOGO.getImage());
        conn = MySqlConnect.connectDB();
        createClient();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtbData = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Chef");

        jPanel1.setBackground(new java.awt.Color(38, 51, 61));

        jtbData.setBackground(new java.awt.Color(38, 51, 61));
        jtbData.setFont(new java.awt.Font("Calibri", 0, 20)); // NOI18N
        jtbData.setForeground(new java.awt.Color(255, 255, 255));
        jtbData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Ready or Not", "Food Name", "Quantity", "Table Number"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtbData.setFillsViewportHeight(true);
        jtbData.setGridColor(new java.awt.Color(255, 255, 255));
        jtbData.setRowHeight(20);
        jtbData.setShowHorizontalLines(false);
        jtbData.setShowVerticalLines(false);
        jtbData.getTableHeader().setResizingAllowed(false);
        jtbData.getTableHeader().setReorderingAllowed(false);
        jtbData.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtbDataMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jtbData);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(23, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 856, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(44, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 436, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(55, 55, 55))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jtbDataMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtbDataMouseClicked
        int selectedRow = jtbData.getSelectedRow();
        boolean b = (boolean) jtbData.getValueAt(selectedRow, 0);
        if(b){
            sendNotification();
            dtm.removeRow(selectedRow);
        }
    }//GEN-LAST:event_jtbDataMouseClicked

    /*
     *This method sets the table values recieved from the server.
    */
    public void setTable(){
        try {
            dtm = (DefaultTableModel) jtbData.getModel();
            for (Map.Entry<String, Integer> entry : orderToMake.entrySet()) {
                Object [] o = {false, entry.getKey(), entry.getValue(), orderWithTable.get(orderToMake)};
                dtm.addRow(o);
                jtbData.setModel(dtm);
                System.out.println(orderToMake);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error in chef table "+ e);
        }
    }
    
    /*
     * This method is used to recieve the object that the server has sent.
    */
    public void recieveOrder(){
        while(true){
            try{
                orderWithTable = (Map<Map<String,Integer>, Integer>)ois.readObject();
                System.out.println("Ordersss: " + orderWithTable);
                for (Map.Entry<Map<String, Integer>, Integer> entry : orderWithTable.entrySet()) {
                    orderToMake = entry.getKey(); 
                    tableNo = entry.getValue();   
                }
                setTable();
            }catch(Exception e){
                JOptionPane.showMessageDialog(null, e);
            }
        }
    }
    
    /*
     * This method is called whenever the checkbox is checked in the table.
     * This method will notify the server about the orders that are prepared.
    */
    public void sendNotification(){
        try {
            Map<Map<String,Integer>, Integer> readyDishwithTable = new LinkedHashMap<>();   
            Map<String,Integer> readyDish = new LinkedHashMap<>();
            readyDish.put(jtbData.getValueAt(jtbData.getSelectedRow(), 1).toString(), (int)jtbData.getValueAt(jtbData.getSelectedRow(), 2));
            readyDishwithTable.put(readyDish, (int)jtbData.getValueAt(jtbData.getSelectedRow(), 3));
            oos.writeObject(readyDishwithTable);
            row--;
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Issue while sending notification" + e);
        }
        
    }
    
    /*
      * This method will create client thread which will recieve object from server
    */
    private void createClient(){
        new Thread(new Runnable() {
            @Override
            public void run() {
                try{
                    s = new Socket("localhost",4562);
                    os = s.getOutputStream();
                    oos = new ObjectOutputStream(os);
                    is = s.getInputStream();
                    ois = new ObjectInputStream(is);
                    recieveOrder();
                }catch(Exception e){
                    JOptionPane.showMessageDialog(null, "Issue manager has not logged in yet");
                    System.exit(1);
                }
            }
        }).start();
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ChefPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ChefPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ChefPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ChefPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ChefPage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jtbData;
    // End of variables declaration//GEN-END:variables
    private Connection conn = null;
    private Map<Map<String,Integer>, Integer> orderWithTable = new LinkedHashMap<>();   
    private Map<String,Integer> orderToMake = new LinkedHashMap<>();
    private DefaultTableModel dtm = null;
    private Socket s = null;
    private InputStream is = null;
    private OutputStream os = null;
    private int row = 0;
    private ObjectInputStream ois = null;
    private ObjectOutputStream oos = null;
     private Integer tableNo;
}
