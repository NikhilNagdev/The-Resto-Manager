
import DatabaseTables.FoodCategory;
import DatabaseTables.FoodItems;
import DatabaseTables.MySqlConnect;
import constants.MyConstants;

import java.awt.Point;
import java.io.ObjectOutputStream;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Vector;
import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.event.DocumentListener;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Nikhil
 */
public class AddOrder extends javax.swing.JFrame{

    /**
     * Creates new form AddOrder
     */    
    public AddOrder(ObjectOutputStream oos, Dashboard db) {
        initComponents();
        myInitComponents(oos, db);    
    }
     
    private void myInitComponents(ObjectOutputStream oos, Dashboard db){
        setSize(987, 720);
        this.setLocationRelativeTo(null);
        this.setResizable(false); 
        this.setIconImage(MyConstants.FRAMELOGO.getImage());
        conn = MySqlConnect.connectDB();
        if(confirmedOrder.isEmpty())
            btnSend.setEnabled(false);
        else
            btnSend.setEnabled(true);
        setFoodCategoryList();
        setFoodItemsList();
        order = new HashMap<>();
        this.oos = oos;
        this.dashboard = db;
        truncTable();
        addDocumentListenerToSearch();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
  
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        btnLeft = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        lblSearch = new javax.swing.JLabel();
        btnSend = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        listItems = new javax.swing.JList<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        listCategory = new javax.swing.JList<>();
        txtSearch = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        listConfirmed = new javax.swing.JList<>();
        txtCategorySearch = new javax.swing.JTextField();
        btnRight = new javax.swing.JButton();
        comboBoxTableNo = new javax.swing.JComboBox<>();
        btnAddFoodItems = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Send order");

        jPanel1.setBackground(new java.awt.Color(38, 51, 61));

        jLabel1.setIcon(new javax.swing.ImageIcon("C:\\Users\\admin\\Desktop\\TheRestoManager\\images\\covered-food-tray-on-a-hand-of-hotel-room-service.png")); // NOI18N

        jPanel2.setBackground(new java.awt.Color(38, 51, 61));

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Please select the category:");

        btnLeft.setFont(new java.awt.Font("Calibri", 1, 16)); // NOI18N
        btnLeft.setText("<");
        btnLeft.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnLeftMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnLeftMouseExited(evt);
            }
        });
        btnLeft.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLeftActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Calibri", 0, 16)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Search:");

        lblSearch.setFont(new java.awt.Font("Calibri", 0, 16)); // NOI18N
        lblSearch.setForeground(new java.awt.Color(255, 255, 255));
        lblSearch.setText("Search:");

        btnSend.setFont(new java.awt.Font("Calibri", 1, 16)); // NOI18N
        btnSend.setIcon(new javax.swing.ImageIcon("C:\\Users\\admin\\Desktop\\TheRestoManager\\images\\paper-plane.png")); // NOI18N
        btnSend.setText("Send");
        btnSend.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnSendMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnSendMouseExited(evt);
            }
        });
        btnSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSendActionPerformed(evt);
            }
        });

        listItems.setBackground(new java.awt.Color(38, 51, 61));
        listItems.setFont(new java.awt.Font("Calibri", 0, 16)); // NOI18N
        listItems.setForeground(new java.awt.Color(255, 255, 255));
        listItems.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Panner tikka", "Garlic Bread", "French fries", "Spring Roll", "Chilly Paneer", "Chilly Mushroom" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        listItems.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listItemsValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(listItems);

        listCategory.setBackground(new java.awt.Color(38, 51, 61));
        listCategory.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        listCategory.setForeground(new java.awt.Color(255, 255, 255));
        listCategory.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listCategoryValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(listCategory);

        txtSearch.setBackground(new java.awt.Color(38, 51, 61));
        txtSearch.setForeground(new java.awt.Color(255, 255, 255));
        txtSearch.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(110, 217, 161)));

        jLabel3.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Please select the table no:");

        listConfirmed.setBackground(new java.awt.Color(38, 51, 61));
        listConfirmed.setFont(new java.awt.Font("Calibri", 0, 16)); // NOI18N
        listConfirmed.setForeground(new java.awt.Color(255, 255, 255));
        jScrollPane3.setViewportView(listConfirmed);

        txtCategorySearch.setBackground(new java.awt.Color(38, 51, 61));
        txtCategorySearch.setForeground(new java.awt.Color(255, 255, 255));
        txtCategorySearch.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(110, 217, 161)));

        btnRight.setFont(new java.awt.Font("Calibri", 1, 16)); // NOI18N
        btnRight.setText(">");
        btnRight.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnRightMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnRightMouseExited(evt);
            }
        });
        btnRight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRightActionPerformed(evt);
            }
        });

        comboBoxTableNo.setBackground(new java.awt.Color(38, 51, 62));
        comboBoxTableNo.setFont(new java.awt.Font("Calibri", 0, 16)); // NOI18N
        comboBoxTableNo.setForeground(new java.awt.Color(255, 255, 255));
        comboBoxTableNo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Table 1", "Table 2", "Table 3", "Table 4", "Table 5", "Table 6", "Table 7", "Table 8" }));
        comboBoxTableNo.setSelectedIndex(-1);
        comboBoxTableNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxTableNoActionPerformed(evt);
            }
        });

        btnAddFoodItems.setFont(new java.awt.Font("Calibri", 1, 16)); // NOI18N
        btnAddFoodItems.setText("+Food items");
        btnAddFoodItems.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnAddFoodItemsMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnAddFoodItemsMouseExited(evt);
            }
        });
        btnAddFoodItems.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddFoodItemsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(lblSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(17, 17, 17))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(77, 77, 77)
                        .addComponent(btnAddFoodItems)))
                .addGap(16, 16, 16)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnLeft)
                    .addComponent(btnRight))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtCategorySearch, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel5)
                        .addComponent(comboBoxTableNo, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnSend, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(14, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(comboBoxTableNo))
                        .addGap(43, 43, 43)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(125, 125, 125)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblSearch)
                            .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnAddFoodItems)
                                    .addComponent(btnSend))
                                .addGap(15, 15, 15))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addComponent(btnRight)
                                .addGap(43, 43, 43)
                                .addComponent(btnLeft)
                                .addGap(165, 165, 165))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtCategorySearch, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addGap(6, 6, 6)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(417, 417, 417))))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(73, 73, 73)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 116, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(179, 179, 179)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 329, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(36, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void listCategoryValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listCategoryValueChanged
        if(c%2!=0){
            setListItems();
            isItemSelected = false;
        }
    }//GEN-LAST:event_listCategoryValueChanged

    private void listItemsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listItemsValueChanged
        if(!listItems.isSelectionEmpty())
            isItemSelected = true;
    }//GEN-LAST:event_listItemsValueChanged


    private void btnRightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRightActionPerformed
        if(isItemSelected){
            String txt = JOptionPane.showInputDialog(null, "Enter the quantity of food: ");
            if(txt!=null){
                if(txt.equals("")){
                    JOptionPane.showMessageDialog(null, "Quantity cannot be empty!");
                }
                else{
                    System.out.println();
                    int quantity = Integer.parseInt(txt);
                    System.out.println("qua" +quantity);
                    if(quantity>50){
                        JOptionPane.showMessageDialog(null, "Quantity cannot be greater than 50");
                    }
                    else if(quantity<=0){
                        JOptionPane.showMessageDialog(null, "Quantity cannot be empty less than 0 or 0");
                    }
                    else if(!(quantity<=0)){
                        addOrder(quantity);
                    }
                }
            }
        }
        else{
            JOptionPane.showMessageDialog(null, "Please select an item to send");
        }
        if(confirmedOrder.isEmpty())
            btnSend.setEnabled(false);
        else
            btnSend.setEnabled(true);
    }//GEN-LAST:event_btnRightActionPerformed

    private void btnSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSendActionPerformed
        int  val = JOptionPane.showConfirmDialog(null, "Are you sure you want to send order", "Confirm Dialog",JOptionPane.YES_NO_OPTION);
        if(val == JOptionPane.YES_OPTION){
             sendOrderToChef();
             confirmedOrder.removeAllElements();
             food.removeAllElements();
             orderToMake  = new LinkedHashMap<>();
             orderWithTable = new LinkedHashMap<>();
             System.out.println("vcvxcvxcv: " + orderWithTable);
             listConfirmed.setListData(new Vector());
            System.out.println("Table no selected: " + (comboBoxTableNo.getSelectedIndex()+1));
             dashboard.calculateCostOfTable(comboBoxTableNo.getSelectedIndex()+1);
             dashboard.setPendingOrders();
             dashboard.bookTable(comboBoxTableNo.getSelectedIndex()+1);
             confirmedOrder.removeAllElements();
             btnSend.setEnabled(false);
        }
    }//GEN-LAST:event_btnSendActionPerformed

    private void btnLeftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLeftActionPerformed
        System.out.println(listConfirmed.getSelectedValue());
        System.out.println(confirmedOrder.remove(listConfirmed.getSelectedValue()));
        String foodname = (String)listConfirmed.getSelectedValue();
        String s[] = foodname.split("x");
        food.remove(listConfirmed.getSelectedValue());
        listConfirmed.setListData(food);
        orderToMake.remove(s[0].trim()); 
        try {
            String query = "DELETE FROM foodtobemade WHERE foodname = '"+ s[0] + "'";
            System.out.println(query);
            PreparedStatement ps = conn.prepareStatement(query);
            ps.execute();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Issue while deleting order: " + e);
        }
    }//GEN-LAST:event_btnLeftActionPerformed

    private void comboBoxTableNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxTableNoActionPerformed
        if(!food.isEmpty()){
            JOptionPane.showMessageDialog(null, "You cannot change the table number as current order is not sent to chef");
            comboBoxTableNo.setSelectedIndex(currentSelectedTable-1);
        }
        else{
            currentSelectedTable = comboBoxTableNo.getSelectedIndex()+1;
        }
        dashboard.setCost(0.00);
    }//GEN-LAST:event_comboBoxTableNoActionPerformed

    private void btnAddFoodItemsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddFoodItemsActionPerformed
        new AddFood().setVisible(true);
    }//GEN-LAST:event_btnAddFoodItemsActionPerformed

    private void btnRightMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnRightMouseEntered
        mouseEnteredAnimation(btnRight);
    }//GEN-LAST:event_btnRightMouseEntered

    private void btnRightMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnRightMouseExited
        mouseExitedAnimation(btnRight);
    }//GEN-LAST:event_btnRightMouseExited

    private void btnLeftMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnLeftMouseEntered
        mouseEnteredAnimation(btnLeft);
    }//GEN-LAST:event_btnLeftMouseEntered

    private void btnLeftMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnLeftMouseExited
        mouseExitedAnimation(btnLeft);
    }//GEN-LAST:event_btnLeftMouseExited

    private void btnAddFoodItemsMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAddFoodItemsMouseEntered
        mouseEnteredAnimation(btnAddFoodItems);
    }//GEN-LAST:event_btnAddFoodItemsMouseEntered

    private void btnAddFoodItemsMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAddFoodItemsMouseExited
        mouseExitedAnimation(btnAddFoodItems);
    }//GEN-LAST:event_btnAddFoodItemsMouseExited

    private void btnSendMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSendMouseEntered
        mouseEnteredAnimation(btnSend);
    }//GEN-LAST:event_btnSendMouseEntered

    private void btnSendMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSendMouseExited
        mouseExitedAnimation(btnSend);
    }//GEN-LAST:event_btnSendMouseExited
    
    /**
     * This method will add the ready orders with quantity to the map.
     */
    private void addOrderToMap(String foodName, int quantity){
        if(orderToMake.containsKey(foodName)){
            quantity += quantity;
        }
        orderToMake.put(foodName, quantity);
    }
    
    /**
     * This method will add the ready orders to the map.
     */
    private void addOrderToMakeToMap(int tableNo) {
        orderWithTable.put(orderToMake,tableNo);
    }
    
    /**
     * This method will send the ready orders to the chef.
     */
    private void sendOrderToChef(){
        try{
            oos.writeObject(orderWithTable);
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, "Issue while sending order to chef: " + e);
        }
    }
    
    /**
     * This method is used to insert pending order in the database with quantity.
     */
    private void addOrder(int quantity){
        DefaultListModel list = new DefaultListModel();
        listConfirmed.setModel(list);
        tableNo = comboBoxTableNo.getSelectedIndex()+1;
        String order = listItems.getSelectedValue();
        food.add(order + " x" + quantity);
        confirmedOrder.add(order);
        listConfirmed.setListData(food);
        String query = "INSERT INTO foodtobemade (foodname, quantity, tableno) VALUES (?," + quantity + ", ?)";
        try {
            preparedStatement = conn.prepareStatement(query);
            preparedStatement.setInt(2, comboBoxTableNo.getSelectedIndex() + 1);
            preparedStatement.setString(1, order);
            addOrderToMap(order, quantity);
            addOrderToMakeToMap(comboBoxTableNo.getSelectedIndex() + 1);
            System.out.println(orderToMake);
            preparedStatement.execute();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Issue while adding quantity: "+ e);
        }
    }
    
    /**
     * This method is used to insert pending order in the database.
     */
    public void addOrder(){
        DefaultListModel<String> confirmed = (DefaultListModel<String>) listConfirmed.getModel();
        String query = "INSERT INTO foodtobemade (foodname, tableno) VALUES (?, ?)";
        try {
            PreparedStatement ps = conn.prepareStatement(query);
            for(int i=0; i<confirmed.getSize(); i++){
                ps.setString(1, (String)confirmed.getElementAt(i));
                ps.setInt(2, comboBoxTableNo.getSelectedIndex() + 1);
                ps.execute();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Issue while adding orders to db: "+ e);
        }
    }
    
    //This method is used to set the food items in the list as per category of food
    private void setListItems(){
        try {
            String query = "SELECT foodname from fooditems where foodcategory = ?";
            preparedStatement = conn.prepareStatement(query);
            System.out.println(preparedStatement + "    " + conn + "     " + fc.getFoodCategoryID(listCategory.getSelectedValue()));
            preparedStatement.setInt(1, fc.getFoodCategoryID(listCategory.getSelectedValue()));
            rs = preparedStatement.executeQuery();
            Vector<String> v = new Vector<>();
            int i=0;
            while(rs.next()){
                v.add(rs.getString("foodname"));
            }
            listItems.removeAll();
            listItems.setListData(v);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Issue: "+ ex);
        }
    }
    
    /**
     * This method will truncate the table of pending orders that are to be prepared.
     */
    private void truncTable(){
        String query = "TRUNCATE TABLE foodtobemade";
        try {
            PreparedStatement ps = conn.prepareStatement(query);
            ps.execute();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error while truncating" + e);
        }
    }
    
    /**
     * This method is used for searching the particular key in the food category table in the database.
     */
    public void search() {
        String key = txtSearch.getText();
        String searchQuery = "";
        if(!key.equals("")){
            try{
                searchQuery = "SELECT * FROM fooditems WHERE foodname like '%" + key + "%'";
                PreparedStatement ps = conn.prepareStatement(searchQuery);
                ResultSet rs = ps.executeQuery();
                Vector<String> items = new Vector<>();
                
                int i=0;
                while(rs.next()){
                    items.add(rs.getString("foodname"));
                   
                }
                listItems.removeAll();
                listItems.setListData(items);   
            }
            catch(Exception e){
                JOptionPane.showMessageDialog(null, "Issue while seraching " + e);
            }
        }else{
            try{
                searchQuery = "SELECT * FROM fooditems";
                PreparedStatement ps = conn.prepareStatement(searchQuery);
                ResultSet rs = ps.executeQuery();
                Vector<String> items = new Vector<>();
                while(rs.next()){
                    items.add(rs.getString("foodname"));
                   
                }
                listItems.removeAll();
                listItems.setListData(items);   
            }
            catch(Exception e){
                JOptionPane.showMessageDialog(null, "Issue while searching " + e);
            }
        }   
    }
    
    private void addDocumentListenerToSearch() {
        txtSearch.getDocument().addDocumentListener(new DocumentListener(){
            @Override
            public void insertUpdate(javax.swing.event.DocumentEvent e) {
                search();
            }

            @Override
            public void removeUpdate(javax.swing.event.DocumentEvent e) {
                search();
            }

            @Override
            public void changedUpdate(javax.swing.event.DocumentEvent e) { }
        });
        
        txtCategorySearch.getDocument().addDocumentListener(new DocumentListener(){
            @Override
            public void insertUpdate(javax.swing.event.DocumentEvent e) {
                searchCategory();
                System.out.println("testing");
            }

            @Override
            public void removeUpdate(javax.swing.event.DocumentEvent e) {
                searchCategory();
            }

            @Override
            public void changedUpdate(javax.swing.event.DocumentEvent e) { }
        });
    }
    
    public int getCurrentSelectedTable(){
        return comboBoxTableNo.getSelectedIndex() + 1;
    }
    
    /**
     * This method is used for searching the particular key in the food category table in the database.
     */
    public void searchCategory(){
        String key = txtCategorySearch.getText();
        String searchQuery = "";
        if(!key.equals("")){
            try{
                searchQuery = "SELECT cat_name FROM foodcategory WHERE cat_name like '%" + key + "%'";
                PreparedStatement ps = conn.prepareStatement(searchQuery);
                ResultSet rs = ps.executeQuery();
                Vector<String> items = new Vector<>();
                int i=0;
                while(rs.next()){
                    items.add(rs.getString(1));
                }
                listCategory.removeAll();
                listCategory.setListData(items);   
            }
            catch(Exception e){
                JOptionPane.showMessageDialog(null, "Issue while seraching " + e);
            }
        }else{
            try{
                setFoodCategoryList();
            }
            catch(Exception e){
                JOptionPane.showMessageDialog(null, "Issue while seraching " + e);
            }
        }   
    }
    
    /**
     * This method is used to set the list of food categories from database.
     */
    public void setFoodCategoryList(){
        Vector<String> foodCategory = new Vector<>();
        String query = "SELECT cat_name FROM foodcategory";
        try {
            PreparedStatement ps = conn.prepareStatement(query);
            ResultSet rs = ps.executeQuery();
            while(rs.next()){
                foodCategory.add(rs.getString(1));
            }
            listCategory.removeAll();
            listCategory.setListData(foodCategory);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Issue while setting food category list: " + e);
        }
    }
    
    /**
     * This method is used to set the list of food items from database.
     */
    public void setFoodItemsList(){
        Vector<String> foodItems = new Vector<>();
        try{
            ResultSet rs = fi.getFoodItems();
            while(rs.next()){
                foodItems.add(rs.getString(1));
            }
            listItems.setListData(foodItems);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Issue while setting food items list: " + e);
        }
    }
    
     public void mouseEnteredAnimation(JButton jb) {
        jb.setSize(jb.getWidth() + 10, jb.getHeight() + 7);
        Point p = jb.getLocation();
        jb.setLocation((int) p.getX() - 5, (int) p.getY() - 3);
    }

    public void mouseExitedAnimation(JButton jb) {
        jb.setSize(jb.getWidth() - 10, jb.getHeight() - 7);
        Point p = jb.getLocation();
        jb.setLocation((int) p.getX() + 5, (int) p.getY() + 3);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
//                new AddOrder().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddFoodItems;
    private javax.swing.JButton btnLeft;
    private javax.swing.JButton btnRight;
    private javax.swing.JButton btnSend;
    private javax.swing.JComboBox<String> comboBoxTableNo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblSearch;
    private javax.swing.JList<String> listCategory;
    private javax.swing.JList<String> listConfirmed;
    private javax.swing.JList<String> listItems;
    private javax.swing.JTextField txtCategorySearch;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables
    private Vector<String> food = new Vector<String>();
    private Connection conn = null;
    private PreparedStatement preparedStatement = null;
    private ResultSet rs = null;
    private Statement statement = null;
    private int c = 1;
    private Map<String, Integer> order = null;
    private int tableNo = 0;
    private Map<Map<String,Integer>, Integer> orderWithTable = new LinkedHashMap<>();   
    private Map<String,Integer> orderToMake = new LinkedHashMap<>();
    private int currentTable = 0;
    private Dashboard dashboard = null;
    private Vector<String> confirmedOrder = new Vector<>();
    private int cost = 0;
    private ObjectOutputStream oos = null;
    private boolean isItemSelected ;
    private int currentSelectedTable = 1;
    private int count = 0;
    private FoodItems fi = new FoodItems();
    private FoodCategory fc = new FoodCategory();
}
